import{_ as e,c as n,o as t,a}from"./app.8766ba32.js";const m=JSON.parse('{"title":"What is Onix Client Scripting?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[{"level":3,"title":"Getting the lua extension","slug":"getting-the-lua-extension","link":"#getting-the-lua-extension","children":[]}]},{"level":2,"title":"Getting the autocomplete","slug":"getting-the-autocomplete","link":"#getting-the-autocomplete","children":[]},{"level":2,"title":"Workspace","slug":"workspace","link":"#workspace","children":[]},{"level":2,"title":"Creating a Command","slug":"creating-a-command","link":"#creating-a-command","children":[{"level":3,"title":"Doing something when the command is executed","slug":"doing-something-when-the-command-is-executed","link":"#doing-something-when-the-command-is-executed","children":[]}]},{"level":2,"title":"Creating a Module","slug":"creating-a-module","link":"#creating-a-module","children":[]},{"level":2,"title":"The update function","slug":"the-update-function","link":"#the-update-function","children":[]},{"level":2,"title":"The render2 function","slug":"the-render2-function","link":"#the-render2-function","children":[]},{"level":2,"title":"The render3d function","slug":"the-render3d-function","link":"#the-render3d-function","children":[]},{"level":2,"title":"The render3d function","slug":"the-render3d-function-1","link":"#the-render3d-function-1","children":[]},{"level":2,"title":"The postInit function","slug":"the-postinit-function","link":"#the-postinit-function","children":[]},{"level":2,"title":"The onDisable function","slug":"the-ondisable-function","link":"#the-ondisable-function","children":[]},{"level":2,"title":"The onEnable function","slug":"the-onenable-function","link":"#the-onenable-function","children":[]}],"relativePath":"scripting/index.md"}'),s={name:"scripting/index.md"},o=a(`<h1 id="what-is-onix-client-scripting" tabindex="-1">What is Onix Client Scripting? <a class="header-anchor" href="#what-is-onix-client-scripting" aria-hidden="true">#</a></h1><p>Scripting is an API built on Lua for Onix Client. With scripting you can create your own CUSTOM modules for the client or use modules the community has already made.</p><p>You can find most public scripts on our <a href="https://github.com/OnixClient-Scripts/OnixClient_Scripts" target="_blank" rel="noreferrer">GitHub Repository</a>.</p><p>You can get access to scripting by purchasing any supporter tier at our <a href="https://onixclient.com/patreon" target="_blank" rel="noreferrer">patreon page</a>.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a></h2><p>You should know the basics of the Lua scripting language. Onix Client Scripting uses lua 5.4. <a href="https://www.lua.org/manual/5.4/manual.html" target="_blank" rel="noreferrer">The documentation for lua 5.4 can be found here.</a><a href="https://youtu.be/bpe6I_flMfo" target="_blank" rel="noreferrer">Here is a video series on how to learn lua.</a></p><p>You will also require the Onix Client Scripting DLL. You can get the Scripting DLL by doing <code>/download scripting:True</code> or <code>!scripting</code> within the Onix Client discord server.</p><p><a href="https://youtu.be/8jy_jE-MSoo" target="_blank" rel="noreferrer">! Here is the guide in video form. !</a></p><h2 id="setting-up" tabindex="-1">Setting up <a class="header-anchor" href="#setting-up" aria-hidden="true">#</a></h2><p>You will need a text editor, for this we strongly recommend Visual Studio Code. Visual Studio Code has good syntax highlighting and allows us to create a customised autocomplete for Onix Client Scripting utilising it. <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">The download for Visual Studio Code can be found here.</a></p><h3 id="getting-the-lua-extension" tabindex="-1">Getting the lua extension <a class="header-anchor" href="#getting-the-lua-extension" aria-hidden="true">#</a></h3><p>Once you have Visual Studio Code, go to the Extensions tab. In the search box, search &quot;lua&quot;. Choose the one made by &quot;sumneko&quot;, (it should be the first one). Click on install</p><h2 id="getting-the-autocomplete" tabindex="-1">Getting the autocomplete <a class="header-anchor" href="#getting-the-autocomplete" aria-hidden="true">#</a></h2><p>(This part can be hard to understand, so please refer to the <a href="https://youtu.be/8jy_jE-MSoo" target="_blank" rel="noreferrer">video guide</a> if you get confused.)</p><ol><li><a href="https://github.com/OnixClient-Scripts/OnixClient_Scripts" target="_blank" rel="noreferrer">Go to the Onix Client Scripting Repository.</a></li><li>Click on the green &quot;Code&quot; button.</li><li>Click on &quot;Download ZIP&quot;.</li><li>Press the Windows Key + R on your keyboard. When the \`Run\` box opens, paste the following:</li></ol><p><code>%localappdata%\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\RoamingState\\OnixClient</code> If you do not see a folder called &quot;Scripts&quot; in the folder that opens, create one. 6. Extract the &quot;AutoComplete&quot; folder from the zip file you downloaded earlier into the Scripts folder. (You can also extract entire file if you want the mods made by the community.) (I would also recommend getting the &quot;Libs&quot; folder aswell) 7. In visual studio code go to File-&gt; Preferences-&gt; Settings, then Extensions-&gt; Lua 8. Scroll down to: &quot;Workspace: User Third Party&quot; (Should be roughly the last setting in the lua extension.) 9. Click on &quot;Add Item&quot; 10. Paste in the following: <code>%localappdata%\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\RoamingState\\OnixClient\\Scripts\\AutoComplete</code></p><p>You now have the autocomplete, congrats! You can now close the settings tab.</p><h2 id="workspace" tabindex="-1">Workspace <a class="header-anchor" href="#workspace" aria-hidden="true">#</a></h2><p>Go back to the OnixClient folder.</p><p><code>%localappdata%\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\RoamingState\\OnixClient\\Scripts\\AutoComplete</code> Now drag the &quot;Scripts&quot; folder into Visual Studio Code.</p><h4 id="now-that-we-have-everything-set-up-we-can-create-a-command-module" tabindex="-1">Now that we have everything set up, we can create a command/module. <a class="header-anchor" href="#now-that-we-have-everything-set-up-we-can-create-a-command-module" aria-hidden="true">#</a></h4><p>But before that make sure in the global scope you dont do things related to the game Example: x,y,z = player.position(), this will crash the game. do it in postInit or in a safe function</p><h2 id="creating-a-command" tabindex="-1">Creating a Command <a class="header-anchor" href="#creating-a-command" aria-hidden="true">#</a></h2><p>To create a command, right click on the &quot;Commands&quot; folder and click on &quot;New File&quot; You can name the file whatever you want, but you generally wana give it the name of the command or close enough to it. Command layout, Every command must start like this</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">command </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">help_message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is an Example help message</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>the &quot;command&quot; variable defines what the user will need to type in chat to execute your command. it cannot have spaces, you should avoid special characters aswell. do not include the prefix ( &quot;.&quot; ) in the command.</p><p>the &quot;description&quot; variable defines the message that will show in .help try to not make it too long if possible, it can contain about anything if you decide to use color codes make sure to reset them (\uFFFDr) at the end</p><h3 id="doing-something-when-the-command-is-executed" tabindex="-1">Doing something when the command is executed <a class="header-anchor" href="#doing-something-when-the-command-is-executed" aria-hidden="true">#</a></h3><p>For this we simply define the function &quot;execute&quot; everything after the name is in arguments (ex: .test among) would mean the &quot;arguments&quot; would be &quot;among&quot;</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="creating-a-module" tabindex="-1">Creating a Module <a class="header-anchor" href="#creating-a-module" aria-hidden="true">#</a></h2><p>To create a module, right click on the &quot;Modules&quot; folder and click on &quot;New File&quot; You can name the file whatever you want, but you generally wana give it the name of the command or close enough to it. Module layout, Every module must start like this</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">description </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">This is an Example description</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>he &quot;name&quot; variable defines what name in the ui your mod will hve. it can have spaces but you should avoid special characters.</p><p>the &quot;description&quot; variable defines the what will show below the module name in the ui do not use color codes on those description</p><h4 id="doing-something-with-the-module" tabindex="-1">Doing something with the module <a class="header-anchor" href="#doing-something-with-the-module" aria-hidden="true">#</a></h4><p>There are multiple functions you can define that will be called, the rest are using event.listen Here is a list of the functions</p><h2 id="the-update-function" tabindex="-1">The update function <a class="header-anchor" href="#the-update-function" aria-hidden="true">#</a></h2><p>Used to calculate slower things, it is called ~10 times per seconds. The &quot;dt&quot; argument is the amount of seconds since the last time this function got called</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="the-render2-function" tabindex="-1">The render2 function <a class="header-anchor" href="#the-render2-function" aria-hidden="true">#</a></h2><p>Used to render things to the screen using gfx2 (v3 renderer). Note that some things from the game might be unstable or cause crashes if used in render2 This is a good use for update, get the information in update and use it in render2</p><p>The &quot;dt&quot; argument is the amount of seconds since the last time this function got called</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="the-render3d-function" tabindex="-1">The render3d function <a class="header-anchor" href="#the-render3d-function" aria-hidden="true">#</a></h2><p>Used to render things in the world using gfx. The &quot;dt&quot; argument is the amount of seconds since the last time this function got called</p><h2 id="the-render3d-function-1" tabindex="-1">The render3d function <a class="header-anchor" href="#the-render3d-function-1" aria-hidden="true">#</a></h2><p>Used to render things in the world using gfx. The &quot;dt&quot; argument is the amount of seconds since the last time this function got called</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render3d</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="the-postinit-function" tabindex="-1">The postInit function <a class="header-anchor" href="#the-postinit-function" aria-hidden="true">#</a></h2><p>Used to do things after initialization, this function is safe to run game things in</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">postInit</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="the-ondisable-function" tabindex="-1">The onDisable function <a class="header-anchor" href="#the-ondisable-function" aria-hidden="true">#</a></h2><p>Used to do cleanup or whatever you need to do when your module is disabled</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onDisable</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div><h2 id="the-onenable-function" tabindex="-1">The onEnable function <a class="header-anchor" href="#the-onenable-function" aria-hidden="true">#</a></h2><p>Used to do something when your module just got enabled</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onEnable</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">end</span></span>
<span class="line"></span></code></pre></div>`,58),i=[o];function l(r,c,p,d,u,h){return t(),n("div",null,i)}const f=e(s,[["render",l]]);export{m as __pageData,f as default};
